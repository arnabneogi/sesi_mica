<?php
define( "ORIGINAL_FORM", false );

ctools_include('ajax');
ctools_include('modal');

module_load_include( 'inc', 'mica_query', 'mica_query.pages.term');

/**
 * Registers urls specific for new query interface 
 * Implements hook_menu().
 */
function query_interface_menu() {
    $items = array();
    
    // This URL is used when a new query term is added, but when no term object exists yet
    // The user can access this screen whenever he has access to the query
    $items['sesi/%ctools_js/node/%node/queries/%mica_query/term/%node/add'] = array(
        'title' => 'Edit',
        'access callback' => '_mica_datasets_query_access',
        'access arguments' => array(3, 5, 'update'),
        'page callback' => 'query_interface_add_query_term_modal_page', 
        'page arguments' => array(1, 3, 5, 7, 9),
        'type' => MENU_CALLBACK
    );
    return $items;
}

/**
 * Changes the edit query term form to always submit to the 'edit' url
 * Implements hook hook_FORM_ID_alter
 * @param array $form
 * @param type $form_state
 * @param type $form_id
 * @return type 
 */
function query_interface_form_mica_datasets_query_term_edit_form_alter(&$form, $form_state, $form_id) {
    $dataset_node = $form_state[ "build_info" ][ "args" ][0];
    $query = $form_state[ "build_info" ][ "args" ][1];
    $query_term = $form_state[ "build_info" ][ "args" ][2];
    
    // Update the form action to make sure not to add the (empty) query term again
    $form[ "#action" ] = url( "mica/ajax/node/" . $dataset_node->nid . "/queries/" . $query->id . "/term/" . $query_term->id . "/edit");
    
    // Update the cancel button to point to the edit query screen
    $form[ "actions" ][ "cancel" ][ "#href" ] = _mica_query_url($dataset_node, $query, "edit");
    
    return $form;
}

/**
 * Changes the form elements of the mica query screen
 * Implements hook form_FORM_ID_alter
 * 
 * @param type $form
 * @param type $form_state
 * @param type $form_id 
 */
function query_interface_form_mica_query_edit_form_alter(&$form, $form_state, $form_id) {
    if( ORIGINAL_FORM )
        return $form;  
    
    // If no query has been created, create a new one and 
    // store it in cache
    $dataset = $form_state['build_info']['args'][0];
    $query = $form_state['build_info']['args'][1];
    if( !isset( $query ) ) {
        $query = _query_interface_new_query($form_state);
        $form_state['build_info']['args'][1] = $query;
    }
        
    // Make sure to post the form to the edit-action
    $form[ "#action" ] = url( "node/" . $dataset->nid . "/queries/" . $query->id . "/edit");

    // Make sure the name field is filled (as it is required within mica)
    // and the complete box with metainformation is hidden from the user
    if( array_key_exists( "general", $form ) ) {
        // Add the name and description hidden field to the form itself
        $nameElement = $form[ "general" ][ "name" ];
        $nameElement[ "#weight" ] = 1;
        $nameElement[ "#type" ] = "hidden";
        
        // Set a default value for the name of the query.
        // This is needed because the name field is required
        if( !$nameElement[ "#default_value" ] ) 
            $nameElement[ "#default_value" ] = "Query " . mktime() . "." . rand(0,10000);
        
        $descriptionElement = $form[ "general" ][ "description" ];
        $descriptionElement[ "#type" ] = "hidden";
        
        // Remove the fieldset with name, description etc.
        unset( $form[ "general" ] );
        
        // Add fields to the form itself
        $form[ "name" ] = $nameElement;
        $form[ "description" ] = $descriptionElement;
    }
    
    // By default, show a list of all variables, with the possibility to add
    // and remove constraints for the variable.
    // First remove the add-term box, if it exists
    $unselected_variables = array();
    if( array_key_exists( "add-term", $form ) ) {
        // Find a set of variables not selected before
        $unselected_variables = $form[ "add-term" ][ "variables" ][ "#options" ];

        // Hide the variables select option from the screen
        // We also add an id attribute, so we can fill the value
        $form[ "add-term" ][ "#description" ] = "";
        $form[ "add-term" ][ "variables" ][ "#type" ] = "hidden";
        $form[ "add-term" ][ "variables" ][ "#attributes" ] = array( "id" => "edit-variables" );
        unset( $form[ "add-term" ][ "add-variable" ] );
        
        // Make sure the variables input field has all options that are available
        // Otherwise, the validation of the form may break
        if( !array_key_exists( "#options", $form[ "add-term" ][ "variables" ] ) ) {
            $form[ "add-term" ][ "variables" ][ "#options" ] = array();
        }
        if( array_key_exists( "list", $form ) ) {
            foreach( $form[ "list" ] as $key => $element ) {
                if( is_numeric( $key ) ) {
                    $form[ "add-term" ][ "variables" ][ "#options" ][ $element[ "vid" ][ "#value" ] ] = $element[ "title" ][ "#markup" ];
                }
            } 
        }
        
        // Set default value, as it is needed to validate the form
        $validIds = array_keys( $form[ "add-term" ][ "variables" ][ "#options" ] );
        $form[ "add-term" ][ "variables" ][ "#value" ] = $validIds[ 0 ];
    }
    
    // Hide all weight elements
    foreach( $form[ "list" ] as $key => $element ) {
        if( is_numeric( $key ) ) {
            $form[ "list" ][ $key ][ "weight" ][ "#type" ] = "hidden";
        }
    }
    
    // Add these notselected variables to the list
    $form[ "not-selected" ] = array();
    foreach( $unselected_variables as $vid => $variableTitle ) {
        $form[ "not-selected" ][] = array(
          'title' => array(
            '#markup' => $variableTitle,
          ),
          'expression' => array(
            '#type' => 'hidden',
            '#value' => $variableTitle,
          ),
          'weight' => array(
            '#type' => 'hidden',
            '#delta' => 1,
            '#default_value' => 0,
          ),
          'id' => array(
            '#type' => 'hidden',
            '#value' => 0,
          ),
          'vid' => array(
            '#type' => 'hidden',
            '#value' => $vid,
          ),
        );
    }
    
    // Types of rows in the form:
    //   The key 'list' defines the list of variables for which a constraint has been
    //       added. Every such row should have 2 buttons, 'edit' and 'delete'. Because
    //       of the way mica has been programmed, the remove button must be inside
    //       the 'remove-term' element. That is what the value denotes.
    //   The key 'not-selected' defines the list of variables that can still be selected.
    //       the buttons for these variables (only add button) will be added to 
    //       an element with the name 'buttons-not-selected
    $rowTypes = array( "list" => "remove-term", "not-selected" => "buttons-not-selected" );
    foreach( $rowTypes as $type => $buttonKey ) {
        $form[ $buttonKey ] = array();
        if( array_key_exists( $type, $form ) ) {
            // Make sure the buttons for all variables exist in the form
            // That is needed for drupal to handle them later on.
            // They are put in the right position in the sesi_mica_query_edit_form method
            foreach( $form[ $type ] as $key => $variable ) {
                if( !is_numeric( $key ) ) {
                    continue;
                }

                $vid = $variable["vid"][ "#value" ];
                $termId = $variable["id"][ "#value" ];
                $alreadySelected = ( $type == "list" );

                if( $alreadySelected ) {
                    $buttons = array( 
                        "edit" => array(
                            "#markup" => ctools_modal_text_button(
                                t('Edit'),
                                'mica/nojs/node/' . $dataset->nid . '/queries/' . $query->id . '/term/' . $termId . '/edit',
                                t('Edit constraint'),
                                'btn ctools-modal-node-style highlight'
                              ),
                        ),
                        "delete" => array(
                            "#type" => "submit",
                            "#name" => "delete-term-" . str_replace( " ", "", $termId ),
                            "#value" => "Delete",
                            "#parents" => array( "remove-term" ),
                            "#vid" => $vid,
                            "#termid" => $termId,
                            "#submit" => array( "query_interface_delete_query_term" ),
                        )
                    );
                } else {
                    $buttons = array( 
                        "add" => array(
                            "#markup" => ctools_modal_text_button(
                                t('Add'),
                                'sesi/nojs/node/' . $dataset->nid . '/queries/' . $query->id . '/term/' . $vid . '/add',
                                t('Add constraint'),
                                'btn btn-success ctools-modal-node-style highlight'
                             ),
                        )
                    );
                }

                $form[ $buttonKey ][ $key ] = $buttons;
            }
        }
    }

    
    return $form;
}

/**
 * Registers the theme method for changing the look and feel of the query edit form
 * 
 * Please notice that changes to this method will only take effect after 
 * clearing the cache in drupal
 * 
 * Implements hook_theme_registry_alter
 * @param string $theme_registry 
 */
function query_interface_theme_registry_alter(&$theme_registry) {
	if (!empty($theme_registry['mica_query_edit_form']['function'])) {
		$theme_registry['mica_query_edit_form']['function'] = 'sesi_mica_query_edit_form';
	}
}

/**
 * Changes the look and feel of the query edit screen. Is registered as theme function 
 * in the query_interface_theme_registry_alter method
 * @param type $variables
 * @return type 
 * @see query_interface_theme_registry_alter()
 */
function sesi_mica_query_edit_form($variables) {
    if( ORIGINAL_FORM )
        return theme_mica_query_edit_form($variables);

    ctools_add_css('mica_datasets', 'mica_datasets');
    
    mica_core_modal_prepare(array(
        array(
          'name' => 'edit-style',
          'width' => 600,
          'height' => 500,
        ),
    ));
    
    $form = $variables['form'];
    $output = "";
    
    // Types of rows in the form:
    //   The key 'list' defines the list of variables for which a constraint has been
    //       added. Every such row should have 2 buttons, 'edit' and 'delete'. Because
    //       of the way mica has been programmed, the remove button must be inside
    //       the 'remove-term' element. That is what the value denotes.
    //   The key 'not-selected' defines the list of variables that can still be selected.
    //       the buttons for these variables (only add button) will be added to 
    //       an element with the name 'buttons-not-selected
    $output .= _query_interface_render_query_terms_table( $form[ "list" ], $form[ "remove-term" ] );
    $output .= _query_interface_render_variables_table( $form[ "not-selected" ], $form[ "buttons-not-selected" ] );
    
  $output .= drupal_render_children($form, array('cross'));
  $output .= drupal_render_children($form, array('actions'));

  // add form hidden items, otherwise submit and validate will be ignored
  $fieldsAlreadyPrinted = array( 'cross', 'actions', 'list', 'remove-term', 'not-selected', 'buttons-list', 'buttons-not-selected' );
  foreach (element_children($form) as $key) {
      if( !in_array( $key, $fieldsAlreadyPrinted ) )
        $output .= drupal_render_children($form, array($key));
  }

  return $output;
}

/**
 * Shows a screen to specify a query term for a given variable.
 * This method is used as a wrapper around mica_datasets_query_term_edit_modal_page, 
 * as that method needs an already saved query_term object.
 * 
 * @param type $js              ??
 * @param type $node            Dataset node
 * @param type $query           Mica query object
 * @param type $variable        Variable to create a constraint for
 * @param type $cross_variable  (optional) cross variable
 * @see mica_datasets_query_term_edit_modal_page()
 * @see query_interface_menu()
 */
function query_interface_add_query_term_modal_page($js, $node, $query, $variable, $cross_variable = NULL) {
    // Create a term based on the variable
    $values = _query_interface_extract_new_query_term_values($query, $variable);
    if (MicaDatasetQueryManager::isCached($query)) {
        // Add the term. Unfortunately, even though the documentation says so
        // this method doesn't return the new term ID
        $cachedQuery = MicaDatasetQueryManager::getCache($query);
        $cachedQuery->addTerm($values);        
        $termId = $query->id . ':' . count( $cachedQuery->terms );
    } else {
        $termId = mica_query_term_insert($values);
    }    
    
    $term = mica_query_term_load( $termId );
    
    // Call the original method
    $form = mica_datasets_query_term_edit_modal_page($js, $node, $query, $term, $cross_variable);
    return $form;
}

/**
 * Callback for the delete term button on the query screen. 
 * 
 * This method does really delete the term immediately, instead of only 
 * keeping track of deleted terms, as mica does. 
 * @param type $form
 * @param type $form_state
 * @return type 
 */
function query_interface_delete_query_term( &$form, $form_state ) {
    if( !array_key_exists( "triggering_element", $form_state ) || !array_key_exists( "#termid", $form_state[ "triggering_element" ] ) )
        return;
    
    // Determine term ID
    $termId = $form_state[ "triggering_element" ][ "#termid" ];
    mica_query_term_delete($termId);
}

/**
 * Create a new query in cache, without any options yet
 * @global type $user
 * @param type $form_state
 * @return stdClass Newly created query 
 */
function _query_interface_new_query( $form_state ) {
  $dataset_node = $form_state['build_info']['args'][0];
  global $user;
  
  // Create a set of values to store the query
  $values = array();
  $values['name'] = "Query " . mktime() . "." . rand(0,10000);
  $values['description'] = "";
  $values['dataset_id'] = $dataset_node->nid;
  $values['cross_variable_id'] = null;
  $values['user_id'] = $user->uid;
  $values['module'] = 'mica_query';

  // Store this query in cache
  return MicaDatasetQueryManager::addQuery($values);
}

/**
 * Create a new set of values to create a new query term. 
 * @param type $query
 * @param type $variable 
 * @see _mica_query_extract_new_query_term_values
 */
function _query_interface_extract_new_query_term_values( $query, $variable ) {
  $values = array();
  $values['query_id'] = $query->id;
  $values['variable_id'] = $variable->nid;
  $values['weight'] = 0;
  return $values;    
}

/**
 * Renders a table with existing queryterms in a query form
 * @param type $termList    A list of selected query terms
 * @param type $buttonList  A list with the buttons to show for each term.
 */
function _query_interface_render_query_terms_table( $termList, $buttonList ) {
    $renderRowFunction = "_query_interface_render_query_term_row";
    $tableHeader = array(t('Query Term'), t( 'Expression' ), t('Operations'));
    
    return _query_interface_render_table( $termList, $buttonList, $renderRowFunction, $tableHeader );
}

/**
 * Renders a table with variables not yet used in a query term
 * @param type $form 
 */
function _query_interface_render_variables_table($termList, $buttonList ) {
    $renderRowFunction = "_query_interface_render_variable_row";
    $tableHeader = array(t('Query Term'), t( 'Description' ), t('Operations'));
    
    return _query_interface_render_table( $termList, $buttonList, $renderRowFunction, $tableHeader );
}

/**
 * Generic function to show a table on the query screen
 * @param type $termList
 * @param type $buttonList
 * @param type $renderRowFunction
 * @param type $tableHeader 
 */
function _query_interface_render_table( $termList, $buttonList, $renderRowFunction, $tableHeader ) {
    $rows = array();
    foreach (element_children($termList) as $key) {
        $variable = $termList[$key];
        $alreadySelected = true;
        
        if( array_key_exists( $key, $buttonList ) ) {
            $buttons = drupal_render_children( $buttonList[ $key ] );
        } else {
            $buttons = null;
        }
        
        $row = call_user_func( $renderRowFunction, $variable, $buttons);
        $rows[] = array( 'data' => $row ); //note the difference between $row and $rows
    }
  
    // Renders the table itself, if any rows are present
    if( count( $rows ) > 0 ) {
        return theme('table', array(
            'header' => $tableHeader,
            'rows' => $rows,
            'empty' => t('No data found'),
        ));
    } else {
        return "";
    }
}

function _query_interface_render_query_term_row($variable, $buttons) {
    // Loading the query term again. This is not a very performant solution
    // as the query term has been loaded in the mica code as well. However
    // the mica code only provides us with the 'title', where we need
    // a separate variable name and expression.
    // However, the query term doesn't have a separate method to get a 
    // human readable expression. For that reason, we use the original
    // title, and remove the variable name from it.
    // TODO: Determine a better way to do this
    $queryTerm = mica_query_term_load($variable[ "id" ][ "#value" ]);
    
    // Split the variable name and expression
    $completeExpression = $variable[ "title" ][ "#markup" ];
    $variableName = $queryTerm->termImpl()->getFieldName();
    $onlyExpression = strlen( $completeExpression ) > strlen( $variableName ) ? substr( $completeExpression, strlen( $variableName ) + 1 ) : "";
    
    // Put the variable name and expression in the right places
    $variable[ "title" ][ "#markup" ] = $variableName;
    $variable[ "humanreadableexpression" ] = array( "#markup" => $onlyExpression );
    
    $row = array();
    
    // title
    $row[] = drupal_render($variable['title']);

    // weight and hidden fields
    $weightElement = $variable['weight'];
    $weightElement[ "#type" ] = "hidden";
    $column = drupal_render($weightElement);
    
    // This expression is set by mica itself
    if (array_key_exists('expression', $variable)) {
      $column .= drupal_render($variable['expression']);
    }

    // Add hidden elements to store id and vid for this element
    $column .= drupal_render($variable['id']) . drupal_render($variable['vid']);
    
    // Also put the expression itself in the column
    if (array_key_exists('humanreadableexpression', $variable)) {
      $column .= drupal_render($variable['humanreadableexpression']);
    }
    
    $row[] = $column;

    // Add operations
    $row[] = $buttons;
    
    return $row;
}

function _query_interface_render_variable_row($variable, $buttons) {
    // Loading the variable again. This is not a very performant solution
    // as the variable has been loaded in the mica code as well. However
    // the mica code only provides us with the 'title', where we need
    // to show the description and taxonomy as well.
    // TODO: Determine a better way to do this
    $variableObject = node_load($variable[ "vid" ][ "#value" ]);
    if( $variableObject ) {
        $wrapper = entity_metadata_wrapper( "node", $variableObject );
        
        // Check if a description is present
        if( $wrapper->body->value() && $wrapper->body->value ) {
            $variable[ "description" ] = array( "#markup" => $wrapper->body->value->value() );
        }
    }
    
    $row = array();
    
    // title
    $row[] = drupal_render($variable['title']);

    // weight and hidden fields
    $weightElement = $variable['weight'];
    $weightElement[ "#type" ] = "hidden";
    $column = drupal_render($weightElement);

    // Add the description to the table
    if( array_key_exists( "description", $variable ) ) 
        $column .= drupal_render($variable["description"] );
    
    $row[] = $column;

    // Add operations
    $row[] = $buttons;
    
    return $row;
}